***************** 			1 5 9 13   f(n) = 1 + 4n
|   |   |   |  	|		4 4 4 
*****************
|   |   |   |  	|		3 7 11 15  
*****************
| P |   |   |   |
*****************        array[0,0] at 
|   |   |   | E |
*****************


3 by 3 == 13 by 7
4 by 4 == 17 by 9     q(n) = 1+2n

how to print p: //p must replace a " ". maybe instead of "   " print " P ".


i(go down next row q(n)) by j(go down columns f(n))

for 4 by 4: print: for rows odd, print "*" then 4 "****";
		   for rows even, print "|" then 4 "   |";
			if person is in that block, then " P "
							" X |" ? --> minefield, dies
						block n-1,n-1 is exit "E"

some person position: start from (0,0);
must reach (n,n) where n is max size;

level:
attributes:
size (n by n) so just 
int[,] space = new space [n, n] // stores whats in the space: 0 = empty
							      1 = minefield								(hidden/Revealed)
							      2 = person

Methods:
generate blocks; // random n blocks block path
check path; //must have path from start to finish
DrawLevel; // draws level, draws after changes made (person walks, etc.)
Collision; // check if person collides with block path.


classes: Level, Person, Game